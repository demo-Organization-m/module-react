name: React Reusable CI/CD Pipeline

on:
  workflow_call:
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      SONAR_TOKEN:
        required: true
    inputs:
      aws-region:
        description: 'AWS Region'
        required: true
        type: string
      sonar-project-key:
        description: 'SonarQube Project Key'
        required: true
        type: string
      aws-domain:
        description: 'AWS CodeArtifact Domain'
        required: true
        type: string
      aws-domain-owner:
        description: 'AWS CodeArtifact Domain Owner'
        required: true
        type: string
      npm-repository:
        description: 'NPM Repository Name'
        required: true
        type: string
      ecr-repo-name:
        description: 'ECR Repository Name'
        required: true
        type: string

jobs:
  test:
    name: Run Unit Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install Dependencies
        run: |
          npm install
          npm install --save-dev @babel/plugin-transform-private-property-in-object \
            @babel/plugin-transform-optional-chaining \
            @babel/plugin-transform-nullish-coalescing-operator \
            @babel/plugin-transform-class-properties
          npm install --save-dev @testing-library/react @testing-library/jest-dom
          npm audit fix || true

      - name: Run Unit Tests with Jest
        run: npm test -- --watchAll=false --coverage --forceExit

  sonarqube:
    name: SonarQube Scan
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install Dependencies
        run: npm install

      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          args: >
            -Dsonar.projectKey=${{ inputs.sonar-project-key }}
            -Dsonar.sources=./
            -Dsonar.test.inclusions="**/*.test.js"
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info

      - name: SonarQube Quality Gate
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  build_and_publish_artifact:
    name: Build Artifact
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set Up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Check for Changes
        id: changes
        run: |
          git fetch origin development
          if git diff --exit-code HEAD origin/development -- . > /dev/null; then
            echo "should_deploy=true" >> $GITHUB_ENV
          else
            echo "should_deploy=false" >> $GITHUB_ENV
          fi

      - name: Increment Version
        if: env.should_deploy == 'true'
        run: |
          VERSION=$(cat version.txt)
          NEW_VERSION=$(echo $VERSION | awk -F. -v OFS=. '{$NF++;print}')
          echo $NEW_VERSION > version.txt
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git remote set-url origin https://${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
          git add version.txt
          git commit -m "chore: bump version to $NEW_VERSION"
          git push

      - name: Install Dependencies
        if: env.should_deploy == 'true'
        run: npm install

      - name: Build React App
        if: env.should_deploy == 'true'
        run: npm run build

      - name: Create package.json for Build
        if: env.should_deploy == 'true'
        run: |
          VERSION=$(cat version.txt)
          echo '{
            "name": "react-app-build",
            "version": "'$VERSION'",
            "description": "React App Build Artifact",
            "main": "index.js",
            "license": "MIT"
          }' > build/package.json

      - name: Upload Build Artifact to GitHub
        if: env.should_deploy == 'true'
        uses: actions/upload-artifact@v3
        with:
          name: react-app-build
          path: build/

  docker:
    name: Docker Build and Deploy
    runs-on: ubuntu-latest
    needs: build_and_publish_artifact

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Download Build Artifact
        uses: actions/download-artifact@v3
        with:
          name: react-app-build
          path: ./build

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ inputs.aws-region }}

      - name: Get Version from version.txt
        id: version
        run: echo "version=$(cat version.txt)" >> $GITHUB_ENV

      - name: Retrieve Existing Version from ECR
        id: ecr-version
        run: |
          EXISTING_TAG=$(aws ecr describe-images \
            --repository-name ${{ inputs.ecr-repo-name }} \
            --query 'imageDetails[].imageTags[]' \
            --output text | grep -o 'v[0-9]*' | sed 's/v//' | sort -n | tail -1 2>/dev/null || echo 0)
          echo "EXISTING_TAG=$EXISTING_TAG" >> $GITHUB_ENV

      - name: Increment Version
        id: increment-version
        run: |
          NEW_VERSION_TAG=v$((EXISTING_TAG + 1))
          echo "NEW_VERSION_TAG=$NEW_VERSION_TAG" >> $GITHUB_ENV
          echo "NEW_VERSION_TAG=$NEW_VERSION_TAG"

      - name: Build Docker Image
        run: |
          echo "Building Docker image..."
          docker build --build-arg ARTIFACT_VERSION=${{ env.NEW_VERSION_TAG }} \
            -t ${{ inputs.ecr-repo-name }}:${{ env.NEW_VERSION_TAG }} \
            -t ${{ inputs.ecr-repo-name }}:latest \
            .

      - name: Authenticate Docker with ECR
        run: |
          aws ecr get-login-password --region ${{ inputs.aws-region }} | \
          docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ inputs.aws-region }}.amazonaws.com

      - name: Tag and Push Docker Images
        run: |
          docker tag ${{ inputs.ecr-repo-name }}:${{ env.NEW_VERSION_TAG }} \
            ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ inputs.aws-region }}.amazonaws.com/${{ inputs.ecr-repo-name }}:${{ env.NEW_VERSION_TAG }}
          docker tag ${{ inputs.ecr-repo-name }}:latest \
            ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ inputs.aws-region }}.amazonaws.com/${{ inputs.ecr-repo-name }}:latest
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ inputs.aws-region }}.amazonaws.com/${{ inputs.ecr-repo-name }}:${{ env.NEW_VERSION_TAG }}
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ inputs.aws-region }}.amazonaws.com/${{ inputs.ecr-repo-name }}:latest

      - name: SSH to EC2 and Deploy Docker Container
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > ec2_key.pem
          chmod 600 ec2_key.pem
          ssh-keyscan -H ${{ secrets.EC2_PUBLIC_IP }} >> ~/.ssh/known_hosts

          ssh -i ec2_key.pem ec2-user@${{ secrets.EC2_PUBLIC_IP }} << 'EOF'
            # Install Docker if not installed
            if ! command -v docker &> /dev/null; then
              sudo yum update -y
              sudo yum install -y docker
              sudo service docker start
              sudo systemctl enable docker
            fi

            # Add ec2-user to Docker group
            sudo usermod -aG docker ec2-user
            newgrp docker

            # Authenticate Docker to AWS ECR
            aws ecr get-login-password --region ${{ inputs.aws-region }} | \
            docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ inputs.aws-region }}.amazonaws.com

            # Stop and remove existing container
            if [ "$(docker ps -aq -f name=react-container)" ]; then
              docker stop react-container
              docker rm react-container
            fi

            # Pull the latest Docker image
            docker pull ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ inputs.aws-region }}.amazonaws.com/${{ inputs.ecr-repo-name }}:latest

            # Run the new container
            docker run -d -p 8001:80 --name react-container \
              ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ inputs.aws-region }}.amazonaws.com/${{ inputs.ecr-repo-name }}:latest

            # Verify the container is running
            if ! docker ps -q -f name=react-container; then
              echo "Failed to start the container 'react-container'. Exiting."
              exit 1
            fi
            echo "Container 'react-container' is running successfully."
          EOF
