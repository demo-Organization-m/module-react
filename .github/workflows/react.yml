name: Python CI/CD Pipeline

on:
  workflow_call:
    inputs:
      repo_name:
        description: 'Repository Name'
        required: true
        type: string
      deploy_env:
        description: 'Deployment Environment'
        required: true
        type: string
      build_artifacts:
        description: 'Build Artifacts (true/false)'
        required: false
        type: boolean
      python_version:
        description: 'Python Version'
        required: true
        type: string

env:
  REPO_NAME: ${{ inputs.repo_name }}
  DEPLOY_ENV: ${{ inputs.deploy_env }}
  BUILD_ARTIFACTS: ${{ inputs.build_artifacts }}
  PYTHON_VERSION: ${{ inputs.python_version }}
  VERSION: ${{ github.sha }}

jobs:
  source_checkout:
    name: Source Checkout
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          repository: ${{ env.REPO_NAME }}
          ref: ${{ github.ref }}
  
  unittest:
      name: Run Unittest
      runs-on: ubuntu-latest
      needs: source_checkout
      steps:
        - name: Checkout Code
          uses: actions/checkout@v3
    
        - name: Set up Python
          uses: actions/setup-python@v4
          with:
            python-version: ${{ env.PYTHON_VERSION }}
    
        - name: Install dependencies
          run: |
            python -m pip install --upgrade pip
            pip install -r */requirements.txt
            if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
            pip install drf_yasg
            pip install pytest pytest-cov djangorestframework
    
        - name: Check for Unittest files
          run: |
            if [ -z "$(find ./*/tests -type f -name 'test_*.py' -exec grep -l 'unittest' {} +)" ]; then
              echo "No Unittest files found."
              exit 1
            fi
    
        - name: Run unit tests
          env:
            PYTHONPATH: ./*
            DJANGO_SETTINGS_MODULE: ncarp.settings  # Replace with your actual Django settings module
          run: python */manage.py test
  
  pytest:
    name: Run Pytest
    runs-on: ubuntu-latest
    needs: unittest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
  
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
  
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r */requirements.txt
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install drf_yasg
          pip install pytest pytest-cov djangorestframework
  
      - name: Set PYTHONPATH
        run: echo "PYTHONPATH=${{ github.workspace }}" >> $GITHUB_ENV
  
      - name: Check for Pytest files
        run: |
          if [ -z "$(find ./*/tests -type f -name 'test_*.py' -exec grep -l 'pytest' {} +)" ]; then
            echo "No Pytest files found."
            exit 1
          fi
  
      - name: Run Pytest
        env:
          PYTHONPATH: ${{ github.workspace }}
          DJANGO_SETTINGS_MODULE: ncarp.settings
        run: |
          cd sustainos
          pytest tests --import-mode=append


  coverage_and_sonarqube:
    name: SonarQube Analysis
    runs-on: ubuntu-latest
    needs: pytest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          repository: ${{ env.REPO_NAME }}
          ref: ${{ github.ref }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov coverage
          pip install pytest pytest-cov djangorestframework

      - name: Code Coverage
        run: |
          pytest --cov=sustainos/tests --cov-report=xml:coverage.xml sustainos/tests
          coverage report

      - name: SonarQube Scan
        id: sonarqube_scan
        uses: sonarsource/sonarqube-scan-action@master
        with:
          projectBaseDir: .
          args: >
            -Dsonar.projectKey=Python_app
            -Dsonar.sources=sustainos/
            -Dsonar.python.coverage.reportPaths=coverage.xml
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          
      - name: Checks quality gate
        uses: sonarsource/sonarqube-quality-gate-action@v1
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        
  build_and_publish_package:
    name: Build, Publish, and Deploy Package
    runs-on: ubuntu-latest
    needs: coverage_and_sonarqube
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        
      - name: Set Up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Check for Changes
        id: changes
        run: |
          git fetch origin development
          if git diff --exit-code HEAD origin/development -- . > /dev/null; then
            echo "Changes detected. Proceeding with version bump and deployment."
            echo "should_deploy=true" >> $GITHUB_ENV
          else
            echo "No changes detected. Skipping version bump and deployment."
            echo "should_deploy=false" >> $GITHUB_ENV
          fi
          
      - name: Set Deploy Output
        id: set_deploy_output
        run: echo "::set-output name=should_deploy::${{ env.should_deploy }}"
  
      - name: Increment Version (if needed)
        if: env.should_deploy == 'true'
        run: |
          python bump_version.py
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git remote set-url origin https://${{ secrets.MY_GITHUB_TOKEN }}@github.com/${{ env.REPO_NAME }}.git
          git commit -am "Bump version to $(cat version.txt)"
          git push
  
      - name: Install Build Tools
        if: env.should_deploy == 'true'
        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel twine
  
      - name: Build Python Package
        if: env.should_deploy == 'true'
        run: |
          python setup.py sdist bdist_wheel
  
      - name: Configure AWS Credentials
        if: env.should_deploy == 'true'
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
  
      - name: Login to AWS CodeArtifact
        if: env.should_deploy == 'true'
        run: |
          aws codeartifact login \
            --tool twine \
            --repository pypi-store \
            --domain aeiforo \
            --domain-owner 061039767866
  
      - name: Publish Package
        if: env.should_deploy == 'true'
        run: |
          twine upload --repository codeartifact --verbose dist/*
  
      - name: Upload Package Artifact to AWS
        if: env.should_deploy == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: sustainos-package
          path: dist/*

       # Step 1: Download the artifact from the previous job
      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: sustainos-package  # The name of the artifact from the previous job
          path: artifact-output    # Directory where the artifact will be downloaded
      
      # Step 2: Unzip the downloaded artifact locally for debugging
      - name: Unzip Artifact Locally
        run: |
          mkdir -p extracted
          unzip artifact-output/*.zip -d extracted
          echo "Artifact extracted to 'extracted' directory."
          pwd
          ls
          echo "Searching for requirements.txt..."
          find extracted -name "requirements.txt" -type f
  
      - name: Get version from version.txt
        id: version
        run: echo "::set-output name=version::$(cat version.txt)"
      
      - name: Build Docker Image with Version
        run: |
          docker build --build-arg ARTIFACT_VERSION=${{ steps.version.outputs.version }} -t my-app-image .
      
      # Set up Docker image for deployment to ECR
      - name: Set up Docker image for deployment
        if: env.should_deploy == 'true'
        run: |
          # Retrieve the highest existing version tag (v1, v2, ...) and increment it
          EXISTING_TAG=$(aws ecr describe-images \
            --repository-name ${{ secrets.ECR_REPO_NAME }} \
            --query 'imageDetails[].imageTags[]' \
            --output text | grep -o 'v[0-9]*' | sed 's/v//' | sort -n | tail -1 2>/dev/null || echo 0)
      
          # Increment the version for the new tag
          NEW_VERSION_TAG=v$((EXISTING_TAG + 1))
      
          # Authenticate Docker to AWS ECR
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com
      
          # Build the Docker image with the version tag and latest tag
          docker build --build-arg ARTIFACT_VERSION=${{ steps.version.outputs.version }} \
            -t ${{ secrets.ECR_REPO_NAME }}:${NEW_VERSION_TAG} \
            -t ${{ secrets.ECR_REPO_NAME }}:latest .
      
          # Tag the image for ECR with both the version tag and latest tag
          docker tag ${{ secrets.ECR_REPO_NAME }}:${NEW_VERSION_TAG} ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/${{ secrets.ECR_REPO_NAME }}:${NEW_VERSION_TAG}
          docker tag ${{ secrets.ECR_REPO_NAME }}:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/${{ secrets.ECR_REPO_NAME }}:latest
      
          # Push the image to ECR with both tags
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/${{ secrets.ECR_REPO_NAME }}:${NEW_VERSION_TAG}
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/${{ secrets.ECR_REPO_NAME }}:latest
      
          
      
      - name: SSH to EC2 and deploy Docker container
        if: env.should_deploy == 'true'
        run: |
          # Create a temporary SSH key file
          echo "${{ secrets.EC2_SSH_KEY }}" > ec2_key.pem
          chmod 600 ec2_key.pem
      
          # Add EC2's SSH host key to known_hosts to avoid host key verification issues
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.EC2_PUBLIC_IP }} >> ~/.ssh/known_hosts
      
          # SSH to the EC2 instance and run commands
          ssh -i ec2_key.pem ec2-user@${{ secrets.EC2_PUBLIC_IP }} << 'EOF'
            # Install Docker if it's not installed
            if ! command -v docker &> /dev/null
            then
              echo "Docker not found, installing..."
              sudo yum update -y
              sudo yum install -y docker
              sudo service docker start
              sudo systemctl enable docker
            else
              echo "Docker is already installed"
            fi
      
            # Add ec2-user to Docker group to allow non-root access to Docker
            sudo usermod -aG docker ec2-user
            newgrp docker
      
            # Authenticate Docker to AWS ECR
            aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com
      
            # Remove existing container with the same name
            if [ "$(docker ps -aq -f name=my-app-container)" ]; then
              echo "Removing existing container 'my-app-container'..."
              docker stop my-app-container
              docker rm my-app-container
            fi
      
            # Pull the Docker image from ECR
            echo "Pulling the latest Docker image..."
            docker pull ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/${{ secrets.ECR_REPO_NAME }}:latest
      
            # Run the container
            echo "Deploying the new container..."
            docker run -d -p 9000:9000 --name my-app-container \
              -e DATABASE_NAME="${{ secrets.DATABASE_NAME }}" \
              -e DATABASE_USER="${{ secrets.DATABASE_USER }}" \
              -e DATABASE_PASSWORD="${{ secrets.DATABASE_PASSWORD }}" \
              -e DATABASE_HOST="${{ secrets.DATABASE_HOST }}" \
              -e DATABASE_PORT="${{ secrets.DATABASE_PORT }}" \
              -e EMAIL_BACKEND="${{ secrets.EMAIL_BACKEND }}" \
              -e CENTRALIZED_HOSTED_URL="${{ secrets.CENTRALIZED_HOSTED_URL }}" \
              -e EMAIL_HOST_USER="${{ secrets.EMAIL_HOST_USER }}" \
              -e EMAIL_HOST_PASSWORD="${{ secrets.EMAIL_HOST_PASSWORD }}" \
              -e SECRET_KEY="${{ secrets.SECRET_KEY }}" \
              ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/${{ secrets.ECR_REPO_NAME }}:latest
      
            # Verify the container is running
            if ! docker ps -q -f name=my-app-container; then
              echo "Failed to start the container 'my-app-container'. Exiting."
              exit 1
            fi
            echo "Container 'my-app-container' is running successfully."
          EOF
      
      - name: List Docker Images on EC2
        run: |
          ssh -i ec2_key.pem ec2-user@${{ secrets.EC2_PUBLIC_IP }} "sudo docker images"
      
      - name: List Running Containers on EC2
        run: |
          ssh -i ec2_key.pem ec2-user@${{ secrets.EC2_PUBLIC_IP }} "sudo docker ps -a"
